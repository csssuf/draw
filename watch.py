from draw.database import db_session
from draw.models import User
import praw
import random
from slackclient import SlackClient
import requests
import time

slack = SlackClient("api-key-here")

desired_map = [
    (138, 443, 3), (139, 443, 3), (140, 443, 3), (141, 443, 3), (142, 443, 3),
    (143, 443, 3), (144, 443, 3), (145, 443, 3), (146, 443, 3), (147, 443, 3),
    (148, 443, 3), (149, 443, 3), (150, 443, 0), (151, 443, 0), (152, 443, 3),
    (153, 443, 3), (138, 444, 3), (139, 444, 3), (140, 444, 3), (141, 444, 3),
    (142, 444, 3), (143, 444, 3), (144, 444, 3), (145, 444, 3), (146, 444, 3),
    (147, 444, 3), (148, 444, 3), (149, 444, 3), (150, 444, 0), (151, 444, 0),
    (152, 444, 3), (153, 444, 3), (138, 445, 3), (139, 445, 3), (140, 445, 0),
    (141, 445, 0), (142, 445, 0), (143, 445, 0), (144, 445, 0), (145, 445, 0),
    (146, 445, 0), (147, 445, 0), (148, 445, 3), (149, 445, 3), (150, 445, 0),
    (151, 445, 0), (152, 445, 3), (153, 445, 3), (138, 446, 3), (139, 446, 3),
    (140, 446, 0), (141, 446, 3), (142, 446, 3), (143, 446, 3), (144, 446, 3),
    (145, 446, 3), (146, 446, 3), (147, 446, 0), (148, 446, 3), (149, 446, 3),
    (150, 446, 0), (151, 446, 0), (152, 446, 3), (153, 446, 3), (138, 447, 3),
    (139, 447, 3), (140, 447, 0), (141, 447, 3), (142, 447, 3), (143, 447, 3),
    (144, 447, 3), (145, 447, 3), (146, 447, 3), (147, 447, 0), (148, 447, 0),
    (149, 447, 0), (150, 447, 0), (151, 447, 0), (152, 447, 3), (153, 447, 3),
    (138, 448, 3), (139, 448, 3), (140, 448, 0), (141, 448, 3), (142, 448, 3),
    (143, 448, 0), (144, 448, 0), (145, 448, 3), (146, 448, 3), (147, 448, 0),
    (148, 448, 3), (149, 448, 3), (150, 448, 0), (151, 448, 0), (152, 448, 3),
    (153, 448, 3), (138, 449, 3), (139, 449, 3), (140, 449, 0), (141, 449, 3),
    (142, 449, 3), (143, 449, 0), (144, 449, 0), (145, 449, 0), (146, 449, 0),
    (147, 449, 0), (148, 449, 3), (149, 449, 3), (150, 449, 0), (151, 449, 0),
    (152, 449, 3), (153, 449, 3), (138, 450, 3), (139, 450, 3), (140, 450, 0),
    (141, 450, 3), (142, 450, 3), (143, 450, 3), (144, 450, 3), (145, 450, 3),
    (146, 450, 3), (147, 450, 0), (148, 450, 3), (149, 450, 3), (150, 450, 3),
    (151, 450, 3), (152, 450, 3), (153, 450, 3), (138, 451, 3), (139, 451, 3),
    (140, 451, 0), (141, 451, 3), (142, 451, 3), (143, 451, 3), (144, 451, 3),
    (145, 451, 3), (146, 451, 3), (147, 451, 0), (148, 451, 3), (149, 451, 3),
    (150, 451, 3), (151, 451, 3), (152, 451, 3), (153, 451, 3), (138, 452, 3),
    (139, 452, 3), (140, 452, 0), (141, 452, 0), (142, 452, 0), (143, 452, 0),
    (144, 452, 0), (145, 452, 3), (146, 452, 3), (147, 452, 0), (148, 452, 3),
    (149, 452, 3), (150, 452, 0), (151, 452, 0), (152, 452, 3), (153, 452, 3),
    (138, 453, 3), (139, 453, 3), (140, 453, 0), (141, 453, 3), (142, 453, 3),
    (143, 453, 0), (144, 453, 0), (145, 453, 3), (146, 453, 3), (147, 453, 0),
    (148, 453, 3), (149, 453, 3), (150, 453, 0), (151, 453, 0), (152, 453, 3),
    (153, 453, 3), (138, 454, 3), (139, 454, 3), (140, 454, 0), (141, 454, 3),
    (142, 454, 3), (143, 454, 3), (144, 454, 3), (145, 454, 3), (146, 454, 3),
    (147, 454, 0), (148, 454, 0), (149, 454, 0), (150, 454, 0), (151, 454, 0),
    (152, 454, 3), (153, 454, 3), (138, 455, 3), (139, 455, 3), (140, 455, 0),
    (141, 455, 3), (142, 455, 3), (143, 455, 3), (144, 455, 3), (145, 455, 3),
    (146, 455, 3), (147, 455, 0), (148, 455, 3), (149, 455, 3), (150, 455, 0),
    (151, 455, 0), (152, 455, 3), (153, 455, 3), (138, 456, 3), (139, 456, 3),
    (140, 456, 0), (141, 456, 0), (142, 456, 0), (143, 456, 0), (144, 456, 0),
    (145, 456, 0), (146, 456, 0), (147, 456, 0), (148, 456, 3), (149, 456, 3),
    (150, 456, 0), (151, 456, 0), (152, 456, 3), (153, 456, 3), (138, 457, 3),
    (139, 457, 3), (140, 457, 3), (141, 457, 3), (142, 457, 3), (143, 457, 3),
    (144, 457, 3), (145, 457, 3), (146, 457, 3), (147, 457, 3), (148, 457, 3),
    (149, 457, 3), (150, 457, 0), (151, 457, 0), (152, 457, 3), (153, 457, 3),
    (138, 458, 3), (139, 458, 3), (140, 458, 3), (141, 458, 3), (142, 458, 3),
    (143, 458, 3), (144, 458, 3), (145, 458, 3), (146, 458, 3), (147, 458, 3),
(148, 458, 3), (149, 458, 3), (150, 458, 0), (151, 458, 0), (152, 458, 3),
(153, 458, 3), (154, 443, 0), (154, 444, 0), (154, 445, 0), (154, 446, 0),
(154, 447, 0), (154, 448, 0), (154, 449, 0), (154, 450, 0), (154, 451, 0),
(154, 452, 0), (154, 453, 0), (154, 454, 0), (154, 455, 0), (154, 456, 0),
(154, 457, 0), (154, 458, 0), (154, 459, 0), (153, 459, 0), (152, 459, 0),
(151, 459, 0), (150, 459, 0), (149, 459, 0), (148, 459, 0), (147, 459, 0),
(146, 459, 0), (145, 459, 0), (144, 459, 0), (143, 459, 0), (142, 459, 0),
(141, 459, 0), (140, 459, 0), (139, 459, 0), (138, 459, 0), (137, 459, 0),
(137, 458, 0), (137, 457, 0), (137, 456, 0), (137, 455, 0), (137, 454, 0),
(137, 453, 0), (137, 452, 0), (137, 451, 0), (137, 450, 0), (137, 449, 0),
(137, 448, 0), (137, 447, 0), (137, 446, 0), (137, 445, 0), (137, 444, 0),
(137, 443, 0), (137, 442, 0), (138, 442, 0), (139, 442, 0), (140, 442, 0),
(141, 442, 0), (142, 442, 0), (143, 442, 0), (144, 442, 0), (145, 442, 0),
(146, 442, 0), (147, 442, 0), (148, 442, 0), (149, 442, 0), (150, 442, 0),
(151, 442, 0), (152, 442, 0), (153, 442, 0), (154, 442, 0), (144, 441, 0),
(145, 441, 0), (146, 441, 0), (147, 441, 0), (148, 441, 0), (149, 441, 0),
(150, 441, 0), (151, 441, 0), (152, 441, 0), (153, 441, 0), (154, 441, 0),
(155, 441, 0), (155, 442, 0), (155, 443, 0), (155, 444, 0), (155, 445, 0),
(155, 446, 0), (155, 447, 0), (155, 448, 0), (155, 449, 0), (155, 450, 0),
(155, 451, 0), (155, 452, 0), (155, 453, 0), (155, 455, 0), (155, 454, 0),
(155, 456, 0), (155, 457, 0), (155, 458, 3), (155, 459, 0), (155, 460, 0),
(154, 460, 0), (153, 460, 0), (152, 460, 0), (151, 460, 0), (150, 460, 0),
(149, 460, 0), (148, 460, 0), (147, 460, 0), (146, 460, 0), (145, 460, 0),
(144, 460, 0), (143, 460, 0), (142, 460, 0), (141, 460, 0), (140, 460, 0),
(139, 460, 0), (138, 460, 0), (137, 460, 0), (136, 460, 0), (136, 459, 0),
(136, 458, 0), (136, 457, 0), (136, 456, 0), (136, 454, 0), (136, 453, 0),
(136, 452, 0), (136, 451, 0), (136, 450, 0), (136, 449, 0), (136, 448, 0),
(136, 447, 0), (136, 446, 0), (136, 445, 0), (136, 444, 0), (136, 443, 0),
(136, 442, 0), (136, 441, 0), (137, 441, 0), (138, 441, 0), (139, 441, 0),
(140, 441, 0), (141, 441, 0), (142, 441, 0), (143, 441, 0), (136, 455, 0)
]

def decrement():
    while True:
        from draw.database import db_session
        from draw.models import User
        users = User.query.all()
        for user in users:
            user.seconds_left -= 1
        db_session.commit()
        time.sleep(1)

import threading
threading.Thread(target=decrement).start()

def get_next_coords(r):
    bitmap_req = requests.get("http://reddit.com/api/place/board-bitmap")
    bitmap = bitmap_req.content[4:]
    pixels = []
    for i in bitmap:
        pixels.append((i & 0xf0) >> 4)
        pixels.append(i & 0xf)

    if len(pixels) < 999 * 999:
        print("Issue getting pixels.")
        return None, None, None, None
    random.shuffle(desired_map)
    for i in desired_map:
        actual_color = pixels[i[1] * 1000 + i[0]]
        if actual_color != i[2]:
            p = {"x": i[0], "y": i[1]}
            call = r.get("/api/place/pixel.json", p)
            #print('Detected (%s, %s) as %s. Painted by /u/%s' % (i[0], i[1],
            #    actual_color, call["user_name"]))
            return i[0], i[1], i[2], call["user_name"]
    return None, None, None, None

while True:
    users = User.query.filter(User.seconds_left <= 0).all()
    for user in users:
        reddit = praw.Reddit(client_id='client_id_here',
                             client_secret='client_secret_here',
                             refresh_token = user.refresh_token,
                             user_agent='drawing bot by /u/csssuf')
        x, y, color, baduser = get_next_coords(reddit)
        if x is None:
            print("Everything's correct, sleeping for 5 seconds.")
            time.sleep(5)
            continue
        req = {}
        req["x"] = x
        req["y"] = y
        req["color"] = color
        try:
            out = reddit.post("/api/place/draw.json",
                            data=req)
            print(out)
            print("Coloring (%s, %s) %s. Shame on /u/%s." % (x, y, color, baduser))
            slack.api_call("chat.postMessage",
                           channel="#place-notifications",
                           text="Colored (%s, %s) as %s. Shame on /u/%s." % (x,
                               y, user.username, baduser))
            user.seconds_left = int(out["wait_seconds"])
            db_session.commit()
            time.sleep(2)
        except Exception as e:
            print("%s - %s" % (e, user.username))
            time.sleep(60)

